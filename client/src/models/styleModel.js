import { getFromStorage, saveToStorage } from "../utils";
import { action, computed } from "easy-peasy";

const styleModel = {
  styleIndex: parseInt(getFromStorage("minibinStyle")) || 46,
  styleList: [
    "a11yDark",
    "a11yLight",
    "agate",
    "anOldHope",
    "androidstudio",
    "arduinoLight",
    "arta",
    "ascetic",
    "atelierCaveDark",
    "atelierCaveLight",
    "atelierDuneDark",
    "atelierDuneLight",
    "atelierEstuaryDark",
    "atelierEstuaryLight",
    "atelierForestDark",
    "atelierForestLight",
    "atelierHeathDark",
    "atelierHeathLight",
    "atelierLakesideDark",
    "atelierLakesideLight",
    "atelierPlateauDark",
    "atelierPlateauLight",
    "atelierSavannaDark",
    "atelierSavannaLight",
    "atelierSeasideDark",
    "atelierSeasideLight",
    "atelierSulphurpoolDark",
    "atelierSulphurpoolLight",
    "atomOneDarkReasonable",
    "atomOneDark",
    "atomOneLight",
    "codepenEmbed",
    "colorBrewer",
    "darcula",
    "dark",
    "darkula",
    "defaultStyle",
    "docco",
    "dracula",
    "far",
    "foundation",
    "githubGist",
    "github",
    "gml",
    "googlecode",
    "grayscale",
    "gruvboxDark",
    "gruvboxLight",
    "hopscotch",
    "hybrid",
    "idea",
    "irBlack",
    "isblEditorDark",
    "isblEditorLight",
    "kimbieDark",
    "kimbieLight",
    "lightfair",
    "magula",
    "monoBlue",
    "monokaiSublime",
    "monokai",
    "nord",
    "obsidian",
    "ocean",
    "paraisoDark",
    "paraisoLight",
    "pojoaque",
    "purebasic",
    "qtcreatorDark",
    "qtcreatorLight",
    "railscasts",
    "rainbow",
    "routeros",
    "shadesOfPurple",
    "solarizedDark",
    "solarizedLight",
    "sunburst",
    "tomorrowNightBlue",
    "tomorrowNightBright",
    "tomorrowNightEighties",
    "tomorrowNight",
    "tomorrow",
    "vs",
    "vs2015",
    "xcode",
    "xt256",
    "zenburn"
  ],
  currentStyleName: computed(state => {
    let index = state.styleIndex;
    return state.styleList[index];
  }),
  getNextStyle: action((state, payload) => {
    state.styleIndex += 1;
    if (state.styleIndex > state.styleList.length - 1) state.styleIndex = 0;
    saveToStorage("minibinStyle", state.styleIndex);
  }),
  getPreviousStyle: action((state, payload) => {
    state.styleIndex -= 1;
    if (state.styleIndex < 0) state.styleIndex = state.styleList.length - 1;
    saveToStorage("minibinStyle", state.styleIndex);
  })
};

export default styleModel;
